[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[import ../example/v0/trivial_sample.cpp]
[import ../example/v0/syntax_samples.cpp]
[section Syntax]

[/ Railroad diagram generated from the EBNF below, in online generator bottlecaps.de/rr

  syntax ::= 'leading_expression'
  ( '.no_reserve()' | '.reserve( size )' | '.reserve_auto()' | '.facets( facets... )' ) *
  '.as(  assembly_string )' ? ' ( arguments... ) '
]

[#syntax_diagram]

[$../syntax.png]
[footnote This railroad diagram was generated on [@http://bottlecaps.de/rr bottlecaps.de/rr]]

The ['[*leading expression]] is the part of the expression the varies according to the output type, as show in [link output_types.output_types this table].

The [link section_assembly_string ['[*assembly string]]] is analogous to what in others format libraries is called as the /format string/, except that it does not format any of the arguments. Formatting is specified instead with [link format_functions format functions].

Example:

[trivial_sample]

[h3 Arguments]

The "conventional" input types that are ( or will be ) supported:

* an integer ( `int, long, long long, unsigned int, unsigned long or unsigned long long`)
* a string ( a raw string or a `std::basic_string` or `std::basic_string_view`)
* a single character
* a `bool` ['( todo )]
* a `void*` ['( todo )]
* a floating point ['( todo )]

In addition to those, there are also some [link special_input_types.special_input_types "special" input types], that are explained in another section.

[#syntax_reserve]
[h3 Reserving output size]

The following member functions only have effect in some output types ( cases 1 to 7 in [link output_types.output_types this table], or when you create the [link OutputWriterConcept reserve] method when defining your own output type ). 

* [*`reserve_auto()`] : The necessary amount of characters is calculated and reserved in the destination object. This is the default.
* [*`reserve(std::size_t size)`] : The calculation is skipped and the specified `size` is used instead.
* [*`no_reserve()`] : No reservation is done.

[syntax_reserve]


[endsect]

