[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[import ../example/v0/decoding_facets.cpp]

[section Facets for encoding convertion]

Input and output can be based on the different charater types:

[input_ouput_different_char_types]

You can customize how this convertion is done, and how the errors are handled. Two facet categories are involved in this process: the decoder \u2014 which converts the input into UTF-32 \u2014 and then the encoder \u2014 that converts this intermediate UTF-32 into the output encoding. When the input and output character types are the same, these conversions are bypassed.

Narrow strings are assumed to be encoded in UTF-8. In oder to use ASCII you need to implement your own encoder and/or decoder.

It is assumed that the encoding corresponding to `wchar_t` is either UTF-16 or UTF-32, depending on whether `sizeof(size_t)` is `2` or `4`. The convertion from wide strings to the corresponding assumed UTF-[~X] is bypassed. For example, if the input is `const wchar_t*` and the ouput is `std::u16string` and `sizeof(wchar_t) == 2`, then this input is simply casted as `reinterpret_cast<const char16_t*>`. The analougous happen if the output is based on `wchar_t` and the input is based on `char16_t` (when `sizeof(wchar_t) == 2`) or on `char32_t` (when `sizeof(wchar_t) == 4`). If you want to surppress this behaviour, you need to define the macro `BOOST_STRINGIFY_DONT_ASSUME_WCHAR_ENCODING` in the compilation of the library ( assuming you are not using it as header-only ) as well as in the code that use it. It must be defined in both cases or in none of them, otherwise you get into some binary incompatibilities. Also, if you use this macro, you need to implement your own decoder and encoder for `wchar_t`.

[include decoding_facets.qbk]
[include encoding_facets.qbk]

[endsect]