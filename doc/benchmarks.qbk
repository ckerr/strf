[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:benchmarks Benchmarks]


[section:performance Runtime performance (writing to raw string)]

The table below shows the time it takes to execute each of the expressions of the rightmost column. 
Boost.Stringify is compared againts Boost.Karma, [@http://fmtlib.net/latest/index.html fmtlib] and sprintf.

[note The runtime performance is likely to degrade as the library evolves.]

* `dest` is a `char*`
* `fmt_writer` is a `fmt::BasicArrayWriter<char>`, from [@http://fmtlib.net/latest/index.html fmtlib]
[table
[[ GCC 7.1 - Ubuntu 16.04 ] [ MSVC 2017 15.2 - Windows 10 ] [Expression]]

[[          ][           ][[*small strings]]]
[[ 63.99 ns ][  83.20 ns ][`write_to(dest) = {"Hello ", "World", "!"}`]]
[[ 63.68 ns ][ 192.98 ns ][`karma::generate(dest, karma::lit("Hello ") << "World" << "!")`]]
[[ 43.97 ns ][  63.49 ns ][`fmt_writer.write("Hello {}!", "World")`]]
[[ 82.49 ns ][ 107.54 ns ][`sprintf(dest, "Hello %s!", "World")`]]
[[          ][           ][]]
[[          ][           ][[*long string ( 1000 characters )]]]
[[ 89.69 ns ][ 580.54 ns ][`write_to(dest) = {"Hello ", long_string, "!"}`]]
[[329.74 ns ][3586.10 ns ][`karma::generate(dest, lit("Hello ") << long_string << "!")`]]
[[ 70.79 ns ][ 542.34 ns ][`fmt_writer.write("Hello {}!", long_string)`]]
[[833.96 ns ][ 200.58 ns ][`sprintf(dest, "Hello %s!", long_string)`]]
[[          ][           ][]]
[[          ][           ][[*integers]]]
[[ 27.69 ns ][  36.84 ns ][`write_to(dest) = {25}`]]
[[  7.57 ns ][   7.52 ns ][`karma::generate(dest, karma::int_, 25)`]]
[[ 40.49 ns ][  68.63 ns ][`fmt_writer.write("{}", 25)`]]
[[ 60.69 ns ][  76.20 ns ][`sprintf(dest, "%d", 25)`]]
[[          ][           ][]]
[[ 41.25 ns ][  49.40 ns ][`write_to(dest) = {INT_MAX}`]]
[[ 34.87 ns ][  34.31 ns ][`karma::generate(dest, karma::int_, INT_MAX);`]]
[[ 47.90 ns ][  72.63 ns ][`fmt_writer.write("{}", INT_MAX)`]]
[[ 79.46 ns ][ 149.89 ns ][`sprintf(dest, "%d", INT_MAX)`]]
[[          ][           ][]]
[[ 58.77 ns ][  66.98 ns ][`write_to(dest) = {LLONG_MAX}`]]
[[ 75.12 ns ][  73.81 ns ][`karma::generate(dest, karma::long_long, LLONG_MAX);`]]
[[ 57.11 ns ][  83.51 ns ][`fmt_writer.write("{}", LLONG_MAX)`]]
[[117.22 ns ][ 304.18 ns ][`sprintf(dest, "%lld", LLONG_MAX)`]]
[[          ][           ][]]
[[ 68.47 ns ][  89.97 ns ][`write_to(dest) = {25, 25, 25}`]]
[[ 21.68 ns ][  37.01 ns ][`karma::generate(dest, int_ << int_ << int_, 25, 25, 25)`]]
[[105.70 ns ][ 172.74 ns ][`fmt_writer.write("{}{}{}", 25, 25, 25)`]]
[[122.54 ns ][ 157.19 ns ][`sprintf(dest, "%d%d%d", 25, 25, 25)`]]
[[          ][           ][]]
[[161.37 ns ][ 199.34 ns ][`write_to(dest) = {LLONG_MAX, LLONG_MAX, LLONG_MAX}`]]
[[210.51 ns ][ 232.63 ns ][`karma::generate(dest, long_long_x3, LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[154.51 ns ][ 224.45 ns ][`fmt_writer.write("{}{}{}", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[268.69 ns ][ 826.84 ns ][`sprintf(dest, "%d%d%d", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[          ][           ][]]
[[ 48.85 ns ][  68.78 ns ][`write_to(dest) = {{25, 20}}`]]
[[ 40.47 ns ][  62.66 ns ][`write_to(dest) .with(strf::width(20)) = {25}`]]
[[ 48.69 ns ][  96.22 ns ][`write_to(dest) ({join_right(20), {25}})`]]
[[115.34 ns ][ 172.52 ns ][`karma::generate(dest, right_align(20)[int_], 25);`]]
[[ 49.37 ns ][  75.31 ns ][`fmt_writer.write("{:20}", 25)`]]
[[ 93.44 ns ][ 191.79 ns ][`sprintf(dest, "%20d", 25)`]]
[[          ][           ][]]
[[ 49.42 ns ][  76.46 ns ][`write_to(dest) = {{25, {6, "<+"}}}`]]
[[ 38.41 ns ][  70.24 ns ][`write_to(dest).with(width(6), left, showpos) (25)`]]
[[ 49.26 ns ][  85.68 ns ][`write_to(dest)({strf::make_ftuple(width(6), left, showpos), {25}})`]]
[[ 78.81 ns ][  63.66 ns ][`karma::generate(dest, karma::left_align(6)[dec_showpos], 25)`]]
[[ 55.19 ns ][  78.98 ns ][`fmt_writer.write("{:<+6}", 25)`]]
[[ 83.55 ns ][ 157.08 ns ][`sprintf(dest, "%6-+d", 25)`]]
[[          ][           ][]]
[[ 38.09 ns ][  63.13 ns ][`write_to(dest) = {{25, "#x"}}`]]
[[ 26.16 ns ][  54.49 ns ][`write_to(dest) .with(hex, showbase) = {25}`]]
[[ 30.20 ns ][  86.13 ns ][`karma::generate(dest, karma::generate(d, lit("0x") << hex, 25)`]]
[[ 49.29 ns ][  74.02 ns ][`fmt_writer.write("{:#x}", 25)`]]
[[ 65.26 ns ][  88.04 ns ][`sprintf(dest, "%#x", 25)`]]
[[          ][           ][]]
[[102.75 ns ][ 158.92 ns ][`write_to(dest) = {25, {25, {6, "<+"}} , {25, "#x"}}`]]
[[ 81.87 ns ][ 192.09 ns ][`karma::generate(dest, int_ << left_6_show << "0x" << hex, 25,25,25)`]]
[[120.76 ns ][ 182.32 ns ][`fmt_writer.write("{}{:<6}{:#x}", 25, 25, 25)`]]
[[145.57 ns ][ 251.54 ns ][`sprintf(dest, "%d%-+6d%#x", 25, 25, 25)`]]
[[          ][           ][]]
[[          ][           ][[*Strings and integers mixed]]]
[[ 86.80 ns ][ 124.44 ns ][`write_to(dest) = {"ten =  ", 10, ", twenty = ", 20}`]]
[[111.12 ns ][ 250.74 ns ][`karma::generate(dest, lit("ten= ") << int_ <<", twenty = " << int_, 10, 20`]]
[[ 90.98 ns ][ 139.22 ns ][`fmt_writer.write("ten = {}, twenty = {}", 10, 20)`]]
[[113.72 ns ][ 214.56 ns ][`sprintf(dest, "ten = %d, twenty= %d", 10, 20)`]]


]

[endsect]

[section:compilation_perfomance Compilation times and generated binary size]

These samples were tested with gcc-7.1 on Ubuntu 16.04 64 bits. You can run them in your system by executing [^make] on [^performance/compilation] directory.

[h4 sample 1]

[def __SAMPLE1_STRIGIFY_HEADER_ONLY__
[@../../performance/compilation/sample1_BoostStringify_header_only.cpp
  sample1_BoostStringify_header_only.cpp
]
]

[def __SAMPLE1_STRIGIFY_STATIC_LIB__
[@../../performance/compilation/sample1_BoostStringify_static_lib.cpp
  sample1_BoostStringify_static_lib.cpp
]
]

[def __SAMPLE1_BOOSTFORMAT__
[@../../performance/compilation/sample1_BoostFormat.cpp  sample1_BoostFormat.cpp]
]

[def __SAMPLE1_OSTREAM__
[@../../performance/compilation/sample1_ostream.cpp  sample1_ostream.cpp]
]

[def __SAMPLE1_FPRINTF__
[@../../performance/compilation/sample1_fprintf.cpp  sample1_fprintf.cpp]
]

[def __SAMPLE1_FMTLIB__
[@../../performance/compilation/sample1_fmtlib.cpp  sample1_fmtlib.cpp]
]

[def __SAMPLE1_FMTLIB_HEADER_ONLY__
[@../../performance/compilation/sample1_fmtlib_header_only.cpp  sample1_fmtlib_header_only.cpp]
]

[table

[[Source file][Flags][Real time][User time][System time][Object file size]]

[[ __SAMPLE1_STRIGIFY_HEADER_ONLY__ ][   -g ][ 0.90 s ][ 0.73 s ][ 0.06 s ][   992 K]]
[[                                  ][  -O0 ][ 0.63 s ][ 0.60 s ][ 0.02 s ][   420 K]]
[[                                  ][  -O3 ][ 1.56 s ][ 1.50 s ][ 0.04 s ][   156 K]]

[[][][][][][]]
[[ __SAMPLE1_STRIGIFY_STATIC_LIB__  ][   -g ][ 0.49 s ][ 0.46 s ][ 0.02 s ][   576 K]]
[[                                  ][  -O0 ][ 0.42 s ][ 0.40 s ][ 0.01 s ][   176 K]]
[[                                  ][  -O3 ][ 0.47 s ][ 0.43 s ][ 0.03 s ][    20 K]]

[[][][][][][]]
[[__SAMPLE1_BOOSTFORMAT__][-g][0.83 s][0.78 s][0.04 s][640 K]]
[[                       ][-O0][0.75 s][0.72 s][0.02 s][280 K]]
[[                       ][-O3][1.38 s][1.34 s][0.03 s][112 K]]

[[][][][][][]]
[[__SAMPLE1_FMTLIB_HEADER_ONLY__][-g] [0.69 s][0.64 s][0.04 s][620 K]]
[[                              ][-O0][0.61 s][0.59 s][0.02 s][252 K]]
[[                              ][-O3][1.19 s][1.15 s][0.03 s][84 K]]

[[][][][][][]]
[[__SAMPLE1_FMTLIB__][-g][0.39 s][0.36 s][0.02 s][232 K]]
[[                  ][-O0][0.35 s][0.30 s][0.04 s][32 K]]
[[                  ][-O3][0.36 s][0.33 s][0.02 s][4 K]]

[[][][][][][]]
[[__SAMPLE1_OSTREAM__][-g][0.29 s][0.27 s][0.02 s][44 K]]
[[                   ][-O0][0.26 s][0.25 s][0.00 s][8 K]]
[[                   ][-O3][0.27 s][0.24 s][0.02 s][4 K]]

[[][][][][][]]
[[__SAMPLE1_FPRINTF__][-g][0.02 s][0.01 s][0.00 s][12 K]]
[[                   ][-O0][0.02 s][0.01 s][0.00 s][4 K]]
[[                   ][-O3][0.02 s][0.00 s][0.00 s][4 K]]

]

[h4 sample 2]

[def __SAMPLE2_STRIGIFY_HEADER_ONLY__
[@../../performance/compilation/sample2_BoostStringify_header_only.cpp
  sample2_BoostStringify_header_only.cpp
]
]

[def __SAMPLE2_STRIGIFY_STATIC_LIB__
[@../../performance/compilation/sample2_BoostStringify_static_lib.cpp
  sample2_BoostStringify_static_lib.cpp
]
]

[def __SAMPLE2_FMTLIB__
[@../../performance/compilation/sample2_fmtlib.cpp  sample2_fmtlib.cpp]
]

[def __SAMPLE2_FMTLIB_HEADER_ONLY__
[@../../performance/compilation/sample2_fmtlib_header_only.cpp  sample2_fmtlib_header_only.cpp]
]

[table

[[Source file] [Flags][Real time][User time][System time][Object file size]]
[[ __SAMPLE2_STRIGIFY_HEADER_ONLY__ ][   -g ][ 1.18 s ][ 1.12 s ][ 0.05 s ][  1704 K]]
[[                                  ][  -O0 ][ 1.05 s ][ 1.01 s ][ 0.03 s ][   808 K]]
[[                                  ][  -O3 ][ 2.07 s ][ 2.02 s ][ 0.04 s ][   288 K]]
[[][][][][][]]
[[ __SAMPLE2_STRIGIFY_STATIC_LIB__  ][   -G ][ 0.75 s ][ 0.69 s ][ 0.04 s ][   988 K]]
[[                                  ][  -O0 ][ 0.65 s ][ 0.59 s ][ 0.05 s ][   384 K]]
[[                                  ][  -O3 ][ 1.08 s ][ 1.03 s ][ 0.04 s ][    76 K]]
[[][][][][][]]
[[ __SAMPLE2_FMTLIB_HEADER_ONLY__ ][ -g ] [ 1.06 s ][ 0.98 s ][ 0.07 s ][ 1140 K ]]
[[                                ][ -O0 ][ 0.95 s ][ 0.91 s ][ 0.04 s ][ 508 K ]]
[[                                ][ -O3 ][ 2.34 s ][ 2.29 s ][ 0.04 s ][ 176 K ]]
[[][][][][][]]
[[ __SAMPLE2_FMTLIB__ ][ -g ] [ 0.94 s ][ 0.88 s ][ 0.05 s ][ 976 K ]]
[[                    ][ -O0 ][ 0.84 s ][ 0.80 s ][ 0.04 s ][ 424 K ]]
[[                    ][ -O3 ][ 2.08 s ][ 2.02 s ][ 0.05 s ][ 144 K ]]

]

[endsect]

[endsect]







