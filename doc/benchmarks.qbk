[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:benchmarks Benchmarks]

[note The performance is likely to degrade as the library evolves.]

[section:performance Runtime performance]
[section Writing to raw string]

The table below shows the time it takes to execute each of the expressions of the rightmost column.
Boost.Stringify is compared againts Boost.Karma, [@http://fmtlib.net/latest/index.html fmtlib] and sprintf.

* `dest` is a `char*`
* `fmt_writer` is a `fmt::BasicArrayWriter<char>`, from [@http://fmtlib.net/latest/index.html fmtlib]
*  You can check the source code [@../../performance/to_char_ptr.cpp here]

[table
[[ GCC 7.1 - Ubuntu 16.04 ] [ MSVC 2017 15.2 - Windows 10 ] [Expression]]
[[            ][   ][[*small strings ]]]
[[  60.08 ns  ][   119.43 ns  ][`boost::stringify::write_to(dest) = {"Hello ", "World", "!"}`]]
[[  54.98 ns  ][    80.01 ns  ][`boost::stringify::write_to(dest) ["Hello {}!"] = {"World"}`]]
[[  52.78 ns  ][   207.32 ns  ][`karma::generate(dest, karma::lit("Hello ") << "World" << "!")`]]
[[  45.41 ns  ][    71.87 ns  ][`fmt_writer.write("Hello {}!", "World")`]]
[[  81.19 ns  ][   107.28 ns  ][`sprintf(dest, "Hello %s!", "World")`]]
[[            ][              ][]]
[[            ][              ][[*long string ( 1000 characters ): ]]]
[[  86.65 ns  ][   573.75 ns  ][`boost::stringify::write_to(dest) = {"Hello ", long_string, "!"}`]]
[[  82.00 ns  ][   541.22 ns  ][`boost::stringify::write_to(dest) ["Hello {}!"] = {long_string}`]]
[[ 286.04 ns  ][  3744.05 ns  ][`karma::generate(dest, lit("Hello ") << long_string << "!")`]]
[[  73.85 ns  ][   582.69 ns  ][`fmt_writer.write("Hello {}!", long_string)`]]
[[ 846.04 ns  ][   189.90 ns  ][`sprintf(dest, "Hello %s!", long_string)`]]
[[            ][              ][]]
[[            ][              ][[*padding ]]]
[[  28.27 ns  ][    45.84 ns  ][`boost::stringify::write_to(dest) = {{"aa", 20}}`]]
[[  26.94 ns  ][    45.67 ns  ][`boost::stringify::write_to(dest) .with(strf::width(20)) = {"aa"}`]]
[[  41.39 ns  ][    69.85 ns  ][`boost::stringify::write_to(dest) = { {join_right(20), {"aa"}} }`]]
[[ 126.01 ns  ][   264.89 ns  ][`karma::generate(dest, karma::right_align(20)["aa"])`]]
[[  31.19 ns  ][    45.68 ns  ][`fmt_writer.write(dest, "{:20}", "aa")`]]
[[ 106.62 ns  ][   177.18 ns  ][`sprintf(dest, "%20s", "aa")`]]
[[            ][              ][]]
[[            ][              ][[*integers ]]]
[[  21.81 ns  ][    37.78 ns  ][`boost::stringify::write_to(dest) = {25}`]]
[[   6.97 ns  ][     8.60 ns  ][`karma::generate(dest, karma::int_, 25)`]]
[[  41.79 ns  ][    73.56 ns  ][`fmt_writer.write("{}", 25)`]]
[[  60.88 ns  ][    79.53 ns  ][`sprintf(dest, "%d", 25)`]]
[[            ][              ][]]
[[  52.61 ns  ][    73.12 ns  ][`boost::stringify::write_to(dest) = {LLONG_MAX}`]]
[[  70.13 ns  ][    77.44 ns  ][`karma::generate(dest, karma::long_long, LLONG_MAX)`]]
[[  56.73 ns  ][    87.98 ns  ][`fmt_writer.write("{}", LLONG_MAX)`]]
[[ 105.32 ns  ][   303.70 ns  ][`sprintf(dest, "%lld", LLONG_MAX)`]]
[[            ][              ][]]
[[ 153.64 ns  ][   207.91 ns  ][`boost::stringify::write_to(dest) = {LLONG_MAX, LLONG_MAX, LLONG_MAX}`]]
[[ 187.42 ns  ][   239.74 ns  ][`boost::stringify::write_to(dest) ["{}{}{}"] = {LLONG_MAX, LLONG_MAX, LLONG_MAX}`]]
[[ 196.61 ns  ][   238.01 ns  ][`karma::generate(d, long_long << long_long << long_long, LLONG_MAX, LLONG_MAX, LLONG_MAX);`]]
[[ 157.93 ns  ][   236.38 ns  ][`fmt_writer.write("{}{}{}", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[ 269.66 ns  ][   851.71 ns  ][`sprintf(dest, "%d%d%d", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[            ][              ][]]
[[            ][              ][[*formatted integers ]]]
[[ 140.03 ns  ][   220.74 ns  ][`boost::stringify::write_to(dest) ["{}{}{}"] = {55555, {55555, {8, "<+"}} , {55555, "#x"}}`]]
[[  95.55 ns  ][   173.16 ns  ][`boost::stringify::write_to(dest) = {55555, {55555, {8, "<+"}} , {55555, "#x"}}`]]
[[  93.40 ns  ][   218.59 ns  ][`karma::generate(dest, int_ << left_align(8)[int_generator<int, 10, true>{}] << "0x" << int_generator<int, 16, false>{}, 55555, 55555, 55555)`]]
[[ 135.15 ns  ][   244.17 ns  ][`fmt_writer.write("{}{:<8}{:#x}", 55555, 55555, 55555)`]]
[[ 163.12 ns  ][   527.02 ns  ][`sprintf(dest, "%d%-+8d%#x", 55555, 55555, 55555)`]]
[[            ][              ][]]
[[            ][              ][[*Strings and itegers mixed: ]]]
[[ 158.44 ns  ][   333.83 ns  ][`boost::stringify::write_to(dest) ["blah blah {} blah {} blah {}"] = {INT_MAX, {1234, {8, "<#x"}}, "abcdef"}`]]
[[ 323.52 ns  ][   793.20 ns  ][`karma::generate(dest, lit("blah blah ") << int_ << " blah " << left_align(8)[int_generator<int, 16, false>{}] << " blah " << "abcdef", INT_MAX, 1234)`]]
[[ 150.22 ns  ][   275.45 ns  ][`fmt_writer.write("blah blah {} blah {:<#8x} blah {}", INT_MAX, 1234, "abcdef")`]]
[[ 205.85 ns  ][   592.59 ns  ][`sprintf(dest, "blah blah %d blah %#-8x blah %s", INT_MAX, 1234, "abcdef")`]]
[[            ][              ][]]
[[  71.48 ns  ][   166.90 ns  ][`boost::stringify::write_to(dest) ["ten = {}, twenty = {}"] = {10, 20}`]]
[[  75.05 ns  ][   145.79 ns  ][`boost::stringify::write_to(dest) = {"ten =  ", 10, ", twenty = ", 20}`]]
[[ 102.57 ns  ][   305.35 ns  ][`karma::generate(dest, lit("ten= ") << int_ <<", twenty = " << int_, 10, 20`]]
[[  93.69 ns  ][   170.93 ns  ][`fmt_writer.write("ten = {}, twenty = {}", 10, 20)`]]
[[ 100.76 ns  ][   254.54 ns  ][`sprintf(dest, "ten = %d, twenty= %d", 10, 20)`]]

]

[endsect]

[section Writing to `FILE*`]

* `dest` a `FILE*` that points to `dev/null` (on linux) or `NUL` (on windows)
*  You can check the source code [@../../performance/to_FILE.cpp here]

[table
[[ GCC 7.1 - Ubuntu 16.04 ] [ MSVC 2017 15.2 - Windows 10 ] [Expression]]
[[            ][   ][[*small strings ]]]
[[  96.51 ns  ][    288.79 ns  ][`boost::stringify::write_to(dest) = {"Hello ", "World", "!"}`]]
[[  84.45 ns  ][    233.40 ns  ][`boost::stringify::write_to(dest) ["Hello {}!"] = {"World"}`]]
[[  64.16 ns  ][    141.96 ns  ][`fmt::print(dest, "Hello {}!", "World")`]]
[[  75.69 ns  ][    198.94 ns  ][`fprintf(dest, "Hello %s!", "World")`]]
[[            ][               ][]]
[[            ][               ][[*long string ( 1000 characters ): ]]]
[[ 209.55 ns  ][   1516.71 ns  ][`boost::stringify::write_to(dest) = {"Hello ", long_string, "!"}`]]
[[ 197.53 ns  ][   1493.05 ns  ][`boost::stringify::write_to(dest) ["Hello {}!"] = {long_string}`]]
[[ 288.53 ns  ][   1640.58 ns  ][`fmt::print(dest, "Hello {}!", long_string)`]]
[[ 871.57 ns  ][   5216.64 ns  ][`fprintf(dest, "Hello %s!", long_string)`]]
[[            ][               ][]]
[[            ][               ][[*padding ]]]
[[ 331.17 ns  ][    879.41 ns  ][`boost::stringify::write_to(dest) = {{"aa", 20}}`]]
[[ 335.93 ns  ][    882.40 ns  ][`boost::stringify::write_to(dest) .with(strf::width(20)) = {"aa"}`]]
[[ 345.49 ns  ][    911.00 ns  ][`boost::stringify::write_to(dest) = { {join_right(20), {"aa"}} }`]]
[[  62.16 ns  ][    121.03 ns  ][`fmt::print(dest, "{:20}", "aa")`]]
[[  86.82 ns  ][    257.78 ns  ][`fprintf(dest, "%20s", "aa")`]]
[[            ][               ][]]
[[            ][               ][[*integers ]]]
[[  29.12 ns  ][     74.43 ns  ][`boost::stringify::write_to(dest) = {25}`]]
[[  56.77 ns  ][    111.03 ns  ][`fmt::print(dest, "{}", 25)`]]
[[  51.89 ns  ][    135.80 ns  ][`fprintf(dest, "%d", 25)`]]
[[            ][               ][]]
[[  61.03 ns  ][    118.91 ns  ][`boost::stringify::write_to(dest) = {LLONG_MAX}`]]
[[  76.11 ns  ][    137.07 ns  ][`fmt::print(dest, "{}", LLONG_MAX)`]]
[[  85.44 ns  ][    448.41 ns  ][`fprintf(dest, "%lld", LLONG_MAX)`]]
[[            ][               ][]]
[[ 200.39 ns  ][    349.56 ns  ][`boost::stringify::write_to(dest) = {LLONG_MAX, LLONG_MAX, LLONG_MAX}`]]
[[ 234.31 ns  ][    379.13 ns  ][`boost::stringify::write_to(dest) ["{}{}{}"] = {LLONG_MAX, LLONG_MAX, LLONG_MAX}`]]
[[ 182.88 ns  ][    312.83 ns  ][`fmt::print(dest, "{}{}{}", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[ 238.99 ns  ][   1219.52 ns  ][`fprintf(dest, "%d%d%d", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[            ][               ][]]
[[            ][               ][[*formatted integers ]]]
[[ 266.20 ns  ][    552.05 ns  ][`boost::stringify::write_to(dest) ["{}{}{}"] = {55555, {55555, {8, "<+"}} , {55555, "#x"}}`]]
[[ 213.28 ns  ][    512.58 ns  ][`boost::stringify::write_to(dest) = {55555, {55555, {8, "<+"}} , {55555, "#x"}}`]]
[[ 150.43 ns  ][    246.44 ns  ][`fmt::print(dest, "{}{:<8}{:#x}", 55555, 55555, 55555)`]]
[[ 145.20 ns  ][    446.59 ns  ][`sprintf(dest, "%d%-+8d%#x", 55555, 55555, 55555)`]]
[[            ][               ][]]
[[            ][               ][[*Strings and itegers mixed: ]]]
[[ 318.82 ns  ][    730.35 ns  ][`boost::stringify::write_to(dest) ["blah blah {} blah {} blah {}"] = {INT_MAX, {1234, {8, "<#x"}}, "abcdef"}`]]
[[ 169.92 ns  ][    280.18 ns  ][`fmt::print(dest, "blah blah {} blah {:<#8x} blah {}", INT_MAX, 1234, "abcdef")`]]
[[ 180.94 ns  ][    631.22 ns  ][`fprintf(dest, "blah blah %d blah %#-8x blah %s", INT_MAX, 1234, "abcdef")`]]
[[            ][               ][]]
[[ 114.82 ns  ][    285.70 ns  ][`boost::stringify::write_to(dest) ["ten = {}, twenty = {}"] = {10, 20}`]]
[[ 127.68 ns  ][    313.83 ns  ][`boost::stringify::write_to(dest) = {"ten =  ", 10, ", twenty = ", 20}`]]
[[ 109.87 ns  ][    198.18 ns  ][`fmt::print(dest, "ten = {}, twenty = {}", 10, 20)`]]
[[ 104.19 ns  ][    316.56 ns  ][`fprintf(dest, "ten = %d, twenty= %d", 10, 20)`]]
]

[endsect]

[section Writing a `std::string`]

* `oss` is a `std::ostringstream`
* You can check the source code [@../../performance/make_string.cpp here]

[table
[[ GCC 7.1 - Ubuntu 16.04 ] [ MSVC 2017 15.2 - Windows 10 ] [Expression]]

[[    56.28 ns  ][  143.15 ns  ][`boost::stringiy::_string({25})`]]
[[    59.35 ns  ][  125.93 ns  ][`boost::stringiy::_string.reserve(2) ({25})`]]
[[    33.14 ns  ][   53.51 ns  ][`boost::stringiy::_string.no_reserve() ({25})`]]
[[    34.78 ns  ][   54.52 ns  ][`boost::stringiy::_string.no_reserve() &= {25}`]]
[[    32.35 ns  ][   52.33 ns  ][`boost::stringiy::_string.no_reserve() ({25}) .value()`]]
[[    32.98 ns  ][   53.04 ns  ][`auto x = make_string.no_reserve() ({25}); auto s = std::move(x)`]]
[[    49.46 ns  ][   85.32 ns  ][`fmt::format("{}", 25)`]]
[[    65.96 ns  ][   19.63 ns  ][`std::to_string(25)`]]
[[              ][             ][]]
[[    85.73 ns  ][  176.91 ns  ][`boost::stringiy::_string({LLONG_MAX})`]]
[[    93.59 ns  ][  148.73 ns  ][`boost::stringiy::_string.no_reserve() ({LLONG_MAX})`]]
[[    84.49 ns  ][  157.11 ns  ][`boost::stringiy::_string.reserve(100) ({LLONG_MAX})`]]
[[    86.89 ns  ][  167.22 ns  ][`boost::stringiy::_string.reserve(100) &= {LLONG_MAX}`]]
[[    80.21 ns  ][  159.58 ns  ][`boost::stringiy::_string.reserve(100) ({LLONG_MAX}) .value()`]]
[[    80.90 ns  ][  161.44 ns  ][`auto x = make_string.reserve(100) ({LLONG_MAX}); auto s = std::move(x.value())`]]
[[    88.57 ns  ][  170.35 ns  ][`fmt::format("{}", LLONG_MAX)`]]
[[   149.73 ns  ][  108.02 ns  ][`std::to_string(LLONG_MAX)`]]
[[              ][             ][]]
[[   143.39 ns  ][  274.82 ns  ][`strf::make_string ["ten = {}, twenty = {}"] ({10, 20})`]]
[[   144.12 ns  ][  277.85 ns  ][`strf::make_string ["ten = {}, twenty = {}"] = {10, 20}`]]
[[   147.06 ns  ][  282.51 ns  ][`strf::make_string ["ten = {}, twenty = {}"] &= {10, 20}`]]
[[   149.72 ns  ][  280.83 ns  ][`strf::make_string .reserve(30) ["ten = {}, twenty = {}"] &= {10, 20}`]]
[[   123.08 ns  ][  226.10 ns  ][`fmt::format("ten = {}, twenty = {}", 10, 20)`]]
[[   429.54 ns  ][ 1436.59 ns  ][`oss << "ten = " << 10 << ", twenty = " << 20`]]
[[   476.62 ns  ][ 2297.69 ns  ][`oss << "ten = " << 10 << ", twenty = " << 20 ; auto s = oss.str()`]]
[[   150.28 ns  ][  303.88 ns  ][`sprintf(buff, "ten = %d, twenty = %d", 10, 20); std::string{buff}`]]
   
]

[endsect]

[section Converting UTF-16 to UTF-8]

*  The compiler is /gcc-7.1/ and OS is the /Ubuntu 16.04 64 bits/
* `u8dest` is a `char*`
* `u16sample1` is an UTF-16 string that contains 500 times the character `u'A'` ( 1 byte in UTF-8)
* `u16sample2` is an UTF-16 string that contains 500 times the character `u'\u0100'` ( 2 bytes in UTF-8)
* `u16sample3` is an UTF-16 string that contains 500 times the character `u'\u0800'` ( 3 bytes in UTF-8)
* `u16sample4` is an UTF-16 string that contains 500 times the substring `u"\U00010000"` ( 4 bytes in UTF-8)
*  You can check the source code [@../../performance/utf16_to_utf8.cpp here]

[table

[[time] [operation]]
[[][]]
[[][[*using Boost.Stringify ]]]
[[  1908.96 ns  ][`boost::stringify::write_to(u8dest).with(strf::lax_u16decoder<char16_t>) = {u16sample1}`]]
[[  1635.05 ns  ][`boost::stringify::write_to(u8dest) = {u16sample1}`]]
[[  2245.94 ns  ][`boost::stringify::write_to(u8dest) = {u16sample2}`]]
[[  2797.00 ns  ][`boost::stringify::write_to(u8dest) = {u16sample3}`]]
[[  4024.34 ns  ][`boost::stringify::write_to(u8dest) = {u16sample4}`]]
[[][]]
[[][[*using `std::codecvt_utf8_utf16<char16_t>`]]]
[[  1454.07 ns  ][`std::codecvt / u16sample1`]]
[[  2201.04 ns  ][`std::codecvt / u16sample2`]]
[[  3018.29 ns  ][`std::codecvt / u16sample3`]]
[[  4636.77 ns  ][`std::codecvt / u16sample4`]]
]

[endsect]

[section Converting UTF-8 to UTF-16]

*  The compiler is /gcc-7.1/ and OS is the /Ubuntu 16.04 64 bits/
* `u16dest` is a `char16_t*`
* `u16sample1` is an UTF-8 string that contains 500 times the character `'A'` ( 1 byte in UTF-8)
* `u16sample2` is an UTF-8 string that contains 500 times the substring `u8"\u0100"` ( 2 bytes in UTF-8)
* `u16sample3` is an UTF-8 string that contains 500 times the substring `u8"\u0800"` ( 3 bytes in UTF-8)
* `u16sample4` is an UTF-8 string that contains 500 times the substring `u8"\U00010000"` ( 4 bytes in UTF-8)
*  You can check the source code [@../../performance/utf8_to_utf16.cpp here]

[table

[[time] [operation]]
[[][]]
[[][[*using Boost.Stringify ]]]
[[  1672.21 ns  ][`boost::stringify::write_to(u16dest) = {u8sample1}`]]
[[  2770.29 ns  ][`boost::stringify::write_to(u16dest) = {u8sample2}`]]
[[  3132.43 ns  ][`boost::stringify::write_to(u16dest) = {u8sample3}`]]
[[  4562.77 ns  ][`boost::stringify::write_to(u16dest) = {u8sample4}`]]
[[][]]
[[][[*using `std::codecvt_utf8_utf16<char16_t>`]]]
[[  2086.46 ns  ][`std::codecvt / u8sample1 to utf16`]]
[[  2913.46 ns  ][`std::codecvt / u8sample2`]]
[[  3434.90 ns  ][`std::codecvt / u8sample3`]]
[[  4429.68 ns  ][`std::codecvt / u8sample4`]]

]

[endsect]
[endsect]

[section:compilation_perfomance Compilation times and generated binary size]

These samples were tested with gcc-7.1 on Ubuntu 16.04 64 bits. You can run them in your system by executing on a bash terminal the script [^run_tests.sh] on [^performance/compilation] directory.

[h4 sample 1]

[def __SAMPLE1_STRIGIFY_HEADER_ONLY__
[@../../performance/compilation/sample1_BoostStringify_header_only.cpp
  sample1_BoostStringify_header_only.cpp
]
]

[def __SAMPLE1_STRIGIFY_STATIC_LIB__
[@../../performance/compilation/sample1_BoostStringify_static_lib.cpp
  sample1_BoostStringify_static_lib.cpp
]
]

[def __SAMPLE1_BOOSTFORMAT__
[@../../performance/compilation/sample1_BoostFormat.cpp  sample1_BoostFormat.cpp]
]

[def __SAMPLE1_OSTREAM__
[@../../performance/compilation/sample1_ostream.cpp  sample1_ostream.cpp]
]

[def __SAMPLE1_FPRINTF__
[@../../performance/compilation/sample1_fprintf.cpp  sample1_fprintf.cpp]
]

[def __SAMPLE1_FMTLIB__
[@../../performance/compilation/sample1_fmtlib.cpp  sample1_fmtlib.cpp]
]

[def __SAMPLE1_FMTLIB_HEADER_ONLY__
[@../../performance/compilation/sample1_fmtlib_header_only.cpp  sample1_fmtlib_header_only.cpp]
]

[table

[[Source file][Flags][Real time][User time][System time][Object file size]]

[[ __SAMPLE1_STRIGIFY_HEADER_ONLY__ ][ -g ][ 0.80 s ][ 0.72 s ][ 0.06 s ][  1012 K]]
[[                                  ][ -O0][ 0.64 s ][ 0.62 s ][ 0.02 s ][   396 K]]
[[                                  ][ -03][ 1.64 s ][ 1.60 s ][ 0.03 s ][   140 K]]

[[][][][][][]]
[[ __SAMPLE1_STRIGIFY_STATIC_LIB__  ][ -g ][ 0.53 s ][ 0.49 s ][ 0.04 s ][   680 K]]
[[                                  ][ -O0][ 0.47 s ][ 0.43 s ][ 0.03 s ][   184 K]]
[[                                  ][ -03][ 0.53 s ][ 0.47 s ][ 0.05 s ][    24 K]]

[[][][][][][]]
[[__SAMPLE1_BOOSTFORMAT__][ -g ][ 0.85 s ][ 0.80 s ][ 0.04 s ][   640 K]]
[[                       ][ -O0][ 0.81 s ][ 0.75 s ][ 0.05 s ][   280 K]]
[[                       ][ -03][ 1.41 s ][ 1.37 s ][ 0.03 s ][   112 K]]

[[][][][][][]]
[[__SAMPLE1_FMTLIB_HEADER_ONLY__][ -g ][ 0.72 s ][ 0.68 s ][ 0.03 s ][   620 K]]
[[                              ][ -O0][ 0.63 s ][ 0.60 s ][ 0.02 s ][   252 K]]
[[                              ][ -03][ 1.22 s ][ 1.18 s ][ 0.03 s ][    84 K]]

[[][][][][][]]
[[__SAMPLE1_FMTLIB__][ -g ][ 0.40 s ][ 0.38 s ][ 0.01 s ][   232 K]]
[[                  ][ -O0][ 0.35 s ][ 0.32 s ][ 0.02 s ][    32 K]]
[[                  ][ -03][ 0.35 s ][ 0.32 s ][ 0.02 s ][     4 K]]

[[][][][][][]]
[[__SAMPLE1_OSTREAM__][ -g ][ 0.29 s ][ 0.26 s ][ 0.02 s ][    44 K]]
[[                   ][ -O0][ 0.28 s ][ 0.26 s ][ 0.01 s ][     8 K]]
[[                   ][ -03][ 0.34 s ][ 0.30 s ][ 0.02 s ][     4 K]]

[[][][][][][]]
[[__SAMPLE1_FPRINTF__][ -g ][ 0.02 s ][ 0.01 s ][ 0.00 s ][    12 K]]
[[                   ][ -O0][ 0.02 s ][ 0.00 s ][ 0.01 s ][     4 K]]
[[                   ][ -03][ 0.02 s ][ 0.01 s ][ 0.00 s ][     4 K]]

]

[h4 sample 2]

[def __SAMPLE2_STRIGIFY_HEADER_ONLY__
[@../../performance/compilation/sample2_BoostStringify_header_only.cpp
  sample2_BoostStringify_header_only.cpp
]
]

[def __SAMPLE2_STRIGIFY_STATIC_LIB__
[@../../performance/compilation/sample2_BoostStringify_static_lib.cpp
  sample2_BoostStringify_static_lib.cpp
]
]

[def __SAMPLE2_FMTLIB__
[@../../performance/compilation/sample2_fmtlib.cpp  sample2_fmtlib.cpp]
]

[def __SAMPLE2_FMTLIB_HEADER_ONLY__
[@../../performance/compilation/sample2_fmtlib_header_only.cpp  sample2_fmtlib_header_only.cpp]
]

[table

[[Source file] [Flags][Real time][User time][System time][Object file size]]
[[ __SAMPLE2_STRIGIFY_HEADER_ONLY__ ][ -g ][ 1.27 s ][ 1.20 s ][ 0.06 s ][  1840 K]]
[[                                  ][ -O0][ 1.14 s ][ 1.06 s ][ 0.06 s ][   844 K]]
[[                                  ][ -03][ 2.23 s ][ 2.17 s ][ 0.05 s ][   292 K]]
[[][][][][][]]
[[ __SAMPLE2_STRIGIFY_STATIC_LIB__  ][ -g ][ 0.83 s ][ 0.78 s ][ 0.04 s ][  1140 K]]
[[                                  ][ -O0][ 0.73 s ][ 0.69 s ][ 0.03 s ][   420 K]]
[[                                  ][ -03][ 1.14 s ][ 1.10 s ][ 0.03 s ][    92 K]]

[[][][][][][]]
[[ __SAMPLE2_FMTLIB_HEADER_ONLY__ ][ -g ][ 1.10 s ][ 1.02 s ][ 0.08 s ][  1140 K]]
[[                                ][ -O0][ 0.98 s ][ 0.96 s ][ 0.02 s ][   508 K]]
[[                                ][ -03][ 2.45 s ][ 2.38 s ][ 0.07 s ][   176 K]]
[[][][][][][]]
[[ __SAMPLE2_FMTLIB__ ][ -g ][ 1.02 s ][ 0.98 s ][ 0.03 s ][   976 K]]
[[                    ][ -O0][ 0.86 s ][ 0.83 s ][ 0.02 s ][   424 K]]
[[                    ][ -03][ 2.15 s ][ 2.11 s ][ 0.04 s ][   144 K]]

]

[endsect]

[endsect]







