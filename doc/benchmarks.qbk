[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:benchmarks Benchmarks]

[note The performance is likely to degrade as the library evolves.]

[#run_time_benchmarks]
[section Run-time performance]
[section Writing to raw string (versus {fmt}, `sprintf` and `std::to_chars`)]

The table below shows the time it takes to execute each of the expressions of the rightmost column.
Boost.Stringify is compared against Boost.Karma, [@http://fmtlib.net/latest/index.html {fmt} 5.2.0] and sprintf.

* `dest` is a `char*`
* `strf` is `boost::stringify` namespace
* `fmt_writer` is a `fmt::BasicArrayWriter<char>`, from [@http://fmtlib.net/latest/index.html {fmt}]
*  You can check the source code [@../../performance/to_char_ptr.cpp here]

[table
[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] [Expression]]
[[            ][           ][[*small strings]]]
[[   20.04 ns ][  40.83 ns ][`strf::write(dest) ("Hello World!")`]]
[[   38.24 ns ][  60.05 ns ][`strf::write(dest) .as("{}") ("Hello World!")`]]
[[   27.53 ns ][  45.53 ns ][`fmt::format_to(dest, "{}", "Hello World!")`]]
[[    0.77 ns ][   0.80 ns ][`std::strcpy(dest, "Hello World!")`]]
[[            ][           ][]]
[[   47.34 ns ][  57.14 ns ][`strf::write(dest) ("Hello ", "World", "!")`]]
[[   51.81 ns ][  76.59 ns ][`strf::write(dest) .as("Hello {}!") ("World")`]]
[[   47.70 ns ][  68.98 ns ][`fmt::format_to(dest, "Hello {}!", "World")`]]
[[   80.09 ns ][ 199.52 ns ][`std::sprintf(dest, "Hello %s!", "World")`]]
[[            ][           ][]]
[[            ][           ][[*long string ( 1000 characters )]]]
[[   68.13 ns ][ 551.86 ns ][`strf::write(dest) ("Hello ", long_string, "!")`]]
[[   76.96 ns ][ 567.14 ns ][`strf::write(dest) .as("Hello {}!") (long_string)`]]
[[   75.61 ns ][ 561.45 ns ][`fmt::format_to(dest, "Hello {}!", long_string)`]]
[[  816.52 ns ][ 264.12 ns ][`std::sprintf(dest, "Hello %s!", long_string)`]]
[[            ][           ][]]
[[            ][           ][[*padding]]]
[[   43.78 ns ][  99.63 ns ][`strf::write(dest) (strf::right("aa", 20))`]]
[[   47.22 ns ][  95.33 ns ][`strf::write(dest) (join_right(20)("aa"))`]]
[[   39.15 ns ][  99.33 ns ][`fmt::format_to(dest, "{:20}", "aa")`]]
[[  103.15 ns ][ 207.51 ns ][`std::sprintf(dest, "%20s", "aa")`]]
[[            ][           ][]]
[[            ][           ][[*integers]]]
[[   40.53 ns ][  75.77 ns ][`strf::write(dest) (25)`]]
[[   29.93 ns ][  53.77 ns ][`fmt::format_to(dest, "{}", 25)`]]
[[   13.48 ns ][   6.83 ns ][`strcpy(dest, fmt::format_int{25}.c_str())`]]
[[    0.73 ns ][   4.82 ns ][`fmt::format_int{25}.c_str()`]]
[[    4.19 ns ][  20.12 ns ][`std::to_chars(dest, dest_end, 25)`]]
[[   58.56 ns ][  98.26 ns ][`std::sprintf(dest, "%d", 25)`]]
[[            ][           ][]]
[[   57.62 ns ][ 104.82 ns ][`strf::write(dest) (LLONG_MAX)`]]
[[   47.39 ns ][  68.69 ns ][`fmt::format_to(dest, "{}", LLONG_MAX)`]]
[[   29.27 ns ][  36.31 ns ][`strcpy(dest, fmt::format_int{LLONG_MAX}.c_str())`]]
[[   21.81 ns ][  26.92 ns ][`fmt::format_int{LLONG_MAX}.c_str()`]]
[[   28.58 ns ][  31.37 ns ][`std::to_chars(dest, dest_end, LONG_MAX)`]]
[[  103.98 ns ][ 329.82 ns ][`std::sprintf(dest, "%lld", LLONG_MAX)`]]
[[            ][           ][]]
[[   93.25 ns ][ 139.02 ns ][`strf::write(dest) .facets(numpunct_3) (LLONG_MAX)`]]
[[   84.38 ns ][ 261.04 ns ][`fmt::format_to(dest, "{:n}", LLONG_MAX)`]]
[[  146.92 ns ][           ][`std::sprintf(dest, "%'lld", LLONG_MAX)`]]
[[            ][           ][]]
[[  152.80 ns ][ 239.85 ns ][`strf::write(dest) (LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  183.52 ns ][ 259.68 ns ][`strf::write(dest) .as("{}{}{}") (LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  128.36 ns ][ 154.95 ns ][`fmt::format_to(dest, "{}{}{}", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  265.52 ns ][ 984.89 ns ][`std::sprintf(dest, "%d%d%d", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[            ][           ][]]
[[            ][           ][[*formatted integers]]]
[[  118.83 ns ][ 213.85 ns ][`strf::write(dest) (55555, +strf::left(55555, 8) , ~strf::hex(55555))`]]
[[  140.76 ns ][ 231.84 ns ][`strf::write(dest) .as("{}{}{}") (55555, +strf::left(55555, 8) , ~strf::hex(55555))`]]
[[  113.37 ns ][ 222.01 ns ][`fmt::format_to(dest, "{}{:<8}{:#x}", 55555, 55555, 55555)`]]
[[  155.21 ns ][ 529.88 ns ][`std::sprintf(dest, "%d%-+8d%#x", 55555, 55555, 55555)`]]
[[            ][           ][]]
[[            ][           ][[*Strings and integers mixed]]]
[[  130.10 ns ][ 216.27 ns ][`strf::write(dest) ("blah blah ", INT_MAX, " blah ", ~strf::hex(1234)<8, " blah ", "abcdef")`]]
[[  158.49 ns ][ 250.22 ns ][`strf::write(dest) .as("blah blah {} blah {} blah {}") (INT_MAX, ~strf::hex(1234)<8, "abcdef")`]]
[[  125.89 ns ][ 227.06 ns ][`fmt::format_to(dest, "blah blah {} blah {:<#8x} blah {}", INT_MAX, 1234, "abcdef")`]]
[[  196.88 ns ][ 882.73 ns ][`std::sprintf(dest, "blah blah %d blah %#-8x blah %s", INT_MAX, 1234, "abcdef")`]]
[[            ][           ][]]
[[   91.20 ns ][ 147.96 ns ][`strf::write(dest) ("ten =  ", 10, ", twenty = ", 20)`]]
[[  111.02 ns ][ 170.68 ns ][`strf::write(dest) .as("ten = {}, twenty = {}") (10, 20)`]]
[[   69.67 ns ][ 111.55 ns ][`fmt::format_to(dest, "ten = {}, twenty = {}", 10, 20)`]]
[[   96.97 ns ][ 471.66 ns ][`std::sprintf(dest, "ten = %d, twenty= %d", 10, 20)`]]
]

[endsect]

[section Writing to `FILE*` (versus {fmt}, and `fprintf`) ]

* `dest` a `FILE*` that points to `dev/null` (on linux) or `NUL` (on windows)
*  You can check the source code [@../../performance/to_FILE.cpp here]

[table
[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] [Expression]]
[[            ][           ][[*small strings ]]]
[[   55.25 ns ][ 112.47 ns ][`strf::write(dest) ("Hello ", "World", "!")`]]
[[   70.56 ns ][ 147.39 ns ][`strf::write(dest) .as("Hello {}!") ("World")`]]
[[   70.84 ns ][ 134.81 ns ][`fmt::print(dest, "Hello {}!", "World")`]]
[[   73.85 ns ][ 320.64 ns ][`fprintf(dest, "Hello %s!", "World")`]]
[[            ][           ][]]
[[            ][           ][[*long string ( 1000 characters ): ]]]
[[  253.97 ns ][1575.17 ns ][`strf::write(dest) ("Hello ", long_string, "!")`]]
[[  265.97 ns ][1582.08 ns ][`strf::write(dest) .as("Hello {}!") (long_string)`]]
[[  348.86 ns ][1715.13 ns ][`fmt::print(dest, "Hello {}!", long_string)`]]
[[  903.42 ns ][6793.47 ns ][`fprintf(dest, "Hello %s!", long_string)`]]
[[            ][           ][]]
[[            ][           ][[*padding ]]]
[[   82.63 ns ][ 195.16 ns ][`strf::write(dest) (strf::right("aa", 20))`]]
[[   83.87 ns ][ 197.35 ns ][`strf::write(dest) (join_right(20)("aa"))`]]
[[   62.38 ns ][ 168.56 ns ][`fmt::print(dest, "{:20}", "aa")`]]
[[   91.11 ns ][ 304.80 ns ][`fprintf(dest, "%20s", "aa")`]]
[[            ][           ][]]
[[            ][           ][[*integers ]]]
[[   58.75 ns ][ 124.08 ns ][`strf::write(dest) (25)`]]
[[   45.96 ns ][ 110.58 ns ][`fmt::print(dest, "{}", 25)`]]
[[   50.29 ns ][ 167.67 ns ][`fprintf(dest, "%d", 25)`]]
[[            ][           ][]]
[[   76.83 ns ][ 169.14 ns ][`strf::write(dest) (LLONG_MAX)`]]
[[   70.80 ns ][ 138.36 ns ][`fmt::print(dest, "{}", LLONG_MAX)`]]
[[   84.51 ns ][ 517.47 ns ][`fprintf(dest, "%lld", LLONG_MAX)`]]
[[            ][           ][]]
[[  125.05 ns ][ 206.83 ns ][`strf::write(dest) .facets(numpunct_3) (LLONG_MAX)`]]
[[            ][           ][]]
[[  188.07 ns ][ 341.10 ns ][`strf::write(dest) (LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  216.13 ns ][ 362.07 ns ][`strf::write(dest) .as("{}{}{}") (LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  167.30 ns ][ 262.02 ns ][`fmt::print(dest, "{}{}{}", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[  239.48 ns ][1397.94 ns ][`fprintf(dest, "%d%d%d", LLONG_MAX, LLONG_MAX, LLONG_MAX)`]]
[[            ][           ][]]
[[            ][           ][[*formatted integers ]]]
[[  173.24 ns ][ 337.70 ns ][`strf::write(dest) .as("{}{}{}") (55555, +strf::fmt(55555)<8 , +strf::hex(55555))`]]
[[  154.56 ns ][ 302.72 ns ][`strf::write(dest) (55555, +strf::fmt(55555)<8 , +strf::hex(55555))`]]
[[  128.91 ns ][ 309.73 ns ][`fmt::print(dest, "{}{:<8}{:#x}", 55555, 55555, 55555)`]]
[[  145.74 ns ][ 580.82 ns ][`fprintf(dest, "%d%-+8d%#x", 55555, 55555, 55555)`]]
[[            ][           ][]]
[[            ][           ][[*Strings and integers mixed: ]]]
[[  210.21 ns ][ 385.46 ns ][`strf::write(dest) .as("blah blah {} blah {} blah {}") (INT_MAX, ~strf::hex(1234)<8, "abcdef")`]]
[[  170.79 ns ][ 340.02 ns ][`fmt::print(dest, "blah blah {} blah {:<#8x} blah {}", INT_MAX, 1234, "abcdef")`]]
[[  179.25 ns ][1154.04 ns ][`fprintf(dest, "blah blah %d blah %#-8x blah %s", INT_MAX, 1234, "abcdef")`]]
[[            ][           ][]]
[[  131.93 ns ][ 232.37 ns ][`strf::write(dest) .as("ten = {}, twenty = {}") (10, 20)`]]
[[  112.76 ns ][ 204.80 ns ][`strf::write(dest) ("ten =  ", 10, ", twenty = ", 20)`]]
[[   89.41 ns ][ 191.49 ns ][`fmt::print(dest, "ten = {}, twenty = {}", 10, 20)`]]
[[   92.18 ns ][ 628.82 ns ][`fprintf(dest, "ten = %d, twenty= %d", 10, 20)`]]
[[            ][           ][]]
[[            ][           ][[*Converting UTF-16 to UTF8]]]
[[  502.95 ns ][1424.97 ns ][`strf::write(buff) (u16sample1); strf::write(dest) (buff)`]]
[[  692.51 ns ][1648.38 ns ][`strf::write(dest) (u16sample1)`]]
[[            ][           ][]]
[[  940.59 ns ][2504.06 ns ][`strf::write(buff) (u16sample2); strf::write(dest) (buff)`]]
[[ 1326.43 ns ][2868.30 ns ][`strf::write(dest) (u16sample2)`]]
[[            ][           ][]]
[[ 1363.44 ns ][3506.43 ns ][`strf::write(buff) (u16sample3); strf::write(dest) (buff)`]]
[[ 1958.14 ns ][4051.44 ns ][`strf::write(dest) (u16sample3)`]]

]

[endsect]

[section Writing a `std::string` ( versus {fmt} and `std::to_string` )]

* `oss` is a `std::ostringstream`
* You can check the source code [@../../performance/to_string.cpp here]

[table
[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] [Expression]]
[[   56.50 ns ][  76.32 ns ][`strf::to_string .no_reserve() ("Hello ", "World", "!")`]]
[[   62.67 ns ][  78.00 ns ][`fmt::format("Hello {}!", "World")`]]
[[            ][           ][]]
[[   63.23 ns ][  96.41 ns ][`strf::to_string(25)`]]
[[   63.92 ns ][  86.82 ns ][`strf::to_string .reserve(2) (25)`]]
[[   60.49 ns ][  87.48 ns ][`strf::to_string .no_reserve() (25)`]]
[[   30.46 ns ][  68.32 ns ][`fmt::format("{}", 25)`]]
[[   65.70 ns ][  12.40 ns ][`std::to_string(25)`]]
[[            ][           ][]]
[[  102.63 ns ][ 203.49 ns ][`strf::to_string (LLONG_MAX)`]]
[[  100.69 ns ][ 204.24 ns ][`strf::to_string .no_reserve() (LLONG_MAX)`]]
[[   98.89 ns ][ 196.36 ns ][`strf::to_string .reserve(100) (LLONG_MAX)`]]
[[   74.49 ns ][ 136.38 ns ][`fmt::format("{}", LLONG_MAX)`]]
[[  145.82 ns ][ 100.80 ns ][`std::to_string(LLONG_MAX)`]]
[[            ][           ][]]
[[  112.25 ns ][ 185.15 ns ][`strf::to_string(strf::right("aa", 20))`]]
[[  103.74 ns ][ 189.32 ns ][`strf::to_string .reserve(20) (strf::right("aa", 20))`]]
[[   81.70 ns ][ 170.10 ns ][`fmt::format(dest, "{:20}", "aa")`]]
[[            ][           ][]]
[[  137.70 ns ][ 235.57 ns ][`strf::to_string .no_reserve() ("ten = ", 10, "twenty = ", 20)`]]
[[  185.38 ns ][ 297.45 ns ][`strf::to_string .as("ten = {}, twenty = {}") (10, 20)`]]
[[  185.62 ns ][ 296.62 ns ][`strf::to_string .as("ten = {}, twenty = {}") (10, 20)`]]
[[  185.48 ns ][ 297.07 ns ][`strf::to_string .reserve(30) .as("ten = {}, twenty = {}") (10, 20)`]]
[[  102.33 ns ][ 199.60 ns ][`fmt::format("ten = {}, twenty = {}", 10, 20)`]]
[[  432.38 ns ][1198.07 ns ][`oss << "ten = " << 10 << ", twenty = " << 20`]]
[[  561.23 ns ][1284.43 ns ][`oss << "ten = " << 10 << ", twenty = " << 20 ; auto s = oss.str()`]]
[[  151.69 ns ][ 546.58 ns ][`sprintf(buff, "ten = %d, twenty = %d", 10, 20); std::string{buff}`]]
[[            ][           ][]]
[[            ][           ][[*Converting UTF-8 to UTF16]]]
[[ 1055.31 ns ][1446.19 ns ][`strf::to_u16string.no_reserve() (u8sample1)`]]
[[  717.66 ns ][1074.84 ns ][`strf::write(buff) (u8sample1); strf::to_u16string(buff)`]]
[[ 1064.95 ns ][1346.12 ns ][`strf::to_u16string (u8sample1)`]]
[[  701.18 ns ][ 945.96 ns ][`strf::to_u16string .reserve(510) (u8sample1)`]]
[[            ][           ][]]
[[            ][           ][[*Converting UTF-16 to UTF8]]]
[[  924.05 ns ][1446.38 ns ][`strf::to_string.no_reserve() (u16sample1)`]]
[[  482.48 ns ][1041.15 ns ][`strf::write(buff) (u16sample1); strf::to_string(buff)`]]
[[  913.17 ns ][1344.28 ns ][`strf::to_string (u16sample1)`]]
[[  632.93 ns ][ 935.23 ns ][`strf::to_string.reserve(510) (u16sample1)`]]
]

[endsect]

[#width_calculation_benchmarks]
[section Width calculation methods]

[import ../performance/width_calculation.cpp]

[itemized_list
  [`u8dest` is an array of `char`]
  [`u16dest` is an array of `char16_t`]
  [`u8str5` is an `std::string` with 5 ascii characters]
  [`u8str50` is an std::string with 50 ascii characters]
  [`u16str5` is an std::u16string with 5 ascii characters]
  [`u16str50`is an std::u16string with 50 ascii characters]
  [`wfunc` is function defined like this: [wfunc_definition]]
  [ You can check the source code [@../../performance/width_calculation.cpp here]]]


[table
[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] [Expression]]
[[            ][           ][[*UTF-8:]]]
[[   36.75 ns ][  82.53 ns ][`strf::write(u8dest) (strf::right(u8str5, 5))`]]
[[   41.28 ns ][  89.60 ns ][`strf::write(u8dest) .facets(strf::width_as_codepoints_count()) (strf::right(u8str5, 5))`]]
[[   50.49 ns ][  99.42 ns ][`strf::write(u8dest) .facets(strf::width_as(wfunc)) (strf::right(u8str5, 5))`]]
[[            ][           ][]]
[[   37.38 ns ][  92.51 ns ][`strf::write(u8dest) (strf::right(u8str50, 50))`]]
[[   41.49 ns ][  96.82 ns ][`strf::write(u8dest) .facets(strf::width_as_codepoints_count()) (strf::right(u8str50, 50))`]]
[[   50.76 ns ][ 107.66 ns ][`strf::write(u8dest) .facets(strf::width_as(wfunc)) (strf::right(u8str50, 50))`]]
[[            ][           ][]]
[[            ][           ][[*UTF-16:]]]
[[   57.79 ns ][ 125.37 ns ][`strf::write(u16dest) (strf::right(u16str5, 5))`]]
[[   61.96 ns ][ 140.90 ns ][`strf::write(u16dest) .facets(strf::width_as_codepoints_count()) (strf::right(u16str5, 5))`]]
[[   68.30 ns ][ 155.24 ns ][`strf::write(u16dest) .facets(strf::width_as(wfunc)) (strf::right(u16str5, 5))`]]
[[            ][           ][]]
[[   59.76 ns ][ 135.90 ns ][`strf::write(u16dest) (strf::right(u16str50, 50))`]]
[[   64.72 ns ][ 140.31 ns ][`strf::write(u16dest) .facets(strf::width_as_codepoints_count()) (strf::right(u16str50, 50))`]]
[[   73.56 ns ][ 155.10 ns ][`strf::write(u16dest) .facets(strf::width_as(wfunc)) (strf::right(u16str50, 50))`]]
]

[endsect ]


[section Converting UTF-16 to UTF-8 ( versus `std::codecvt_utf8_utf16` ) ]

* `u8dest` is a `char*`
* `u16sample1` is an UTF-16 string that contains 500 times the character `u'A'` ( 1 byte in UTF-8)
* `u16sample2` is an UTF-16 string that contains 500 times the character `u'\u0100'` ( 2 bytes in UTF-8)
* `u16sample3` is an UTF-16 string that contains 500 times the character `u'\u0800'` ( 3 bytes in UTF-8)
* `u16sample4` is an UTF-16 string that contains 500 times the sub-string `u"\U00010000"` ( 4 bytes in UTF-8)
*  You can check the source code [@../../performance/utf16_to_utf8.cpp here]

[table

[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] []]
[[            ][           ][[*UTF-16 to UTF-8]]]
[[  384.19 ns ][ 602.02 ns ][`boost::stringify::write(u8dest)(u16sample1)`]]
[[  735.69 ns ][ 974.17 ns ][`boost::stringify::write(u8dest)(u16sample2)`]]
[[ 1093.53 ns ][1333.00 ns ][`boost::stringify::write(u8dest)(u16sample3)`]]
[[ 2032.39 ns ][2271.51 ns ][`boost::stringify::write(u8dest)(u16sample4)`]]
[[            ][           ][]]
[[            ][           ][[*UTF-16 to UTF-8 using std::codecvt_utf8_utf16<char16_t>]]]
[[ 1420.60 ns ][1847.23 ns ][converting `u16sample1`]]
[[ 2174.41 ns ][2816.00 ns ][converting `u16sample2`]]
[[ 2974.80 ns ][3757.45 ns ][converting `u16sample3`]]
[[ 4550.72 ns ][7005.18 ns ][converting `u16sample4`]]
]

[endsect]

[section Converting UTF-8 to UTF-16 ( versus `std::codecvt_utf8_utf16` ) ]

* `u16dest` is a `char16_t*`
* `u16sample1` is an UTF-8 string that contains 500 times the character `'A'` ( 1 byte in UTF-8)
* `u16sample2` is an UTF-8 string that contains 500 times the sub-string `u8"\u0100"` ( 2 bytes in UTF-8)
* `u16sample3` is an UTF-8 string that contains 500 times the sub-string `u8"\u0800"` ( 3 bytes in UTF-8)
* `u16sample4` is an UTF-8 string that contains 500 times the sub-string `u8"\U00010000"` ( 4 bytes in UTF-8)
*  You can check the source code [@../../performance/utf8_to_utf16.cpp here]

[table
[[ GCC 8.2 - Ubuntu 16.04 ] [ MSVC 2017 15.8 - Windows 10 ] []]
[[            ][           ][[*UTF-8 to UTF-16]]]
[[  401.65 ns ][ 611.88 ns ][`boost::stringify::write(u16dest)(u8sample1)`]]
[[ 1092.40 ns ][1158.92 ns ][`boost::stringify::write(u16dest)(u8sample2)`]]
[[ 1815.23 ns ][2063.98 ns ][`boost::stringify::write(u16dest)(u8sample3)`]]
[[ 2536.78 ns ][3163.68 ns ][`boost::stringify::write(u16dest)(u8sample4)`]]
[[            ][           ][]]
[[            ][           ][[*UTF-8 to UTF-16 using std::codecvt_utf8_utf16<char16_t>]]]
[[ 2053.19 ns ][1792.42 ns ][converting `u8sample1 to utf16`]]
[[ 2855.50 ns ][2824.82 ns ][converting `u8sample2`]]
[[ 3397.86 ns ][3372.80 ns ][converting `u8sample3`]]
[[ 4337.94 ns ][436620.81 ns ][converting `u8sample4`]]
]

[endsect]
[endsect]

[#compilation_benchmarks]
[section Compilation times and generated binary size]

[def _COMP_BENCHMARKS_SCRIPT [@ ../../performance/compilation/run_benchmarks.py run_benchmarks.py]]

These samples were tested with gcc-8.2 on Ubuntu 16.04 64 bits. You can run them in your system (unix only) by executing on the script _COMP_BENCHMARKS_SCRIPT on [^performance/compilation] directory.

Each source file in the leftmost column has been compiled several times creating several almost identical object files ( each compilation defines a certain macro with a different value ). Then different programs have been build, each of them with a different number of such object files ( in addition to the source file that defines the main function which uses all the functions of all the used object files ). This way we can see how much the code contributes to the size of the final build, as shown in the rightmost column.


[def to_charptr_stringify_ho    [@ ../../performance/compilation/to_charptr_stringify_ho.cpp    to_charptr_stringify_ho.cpp    ]]
[def to_charptr_stringify       [@ ../../performance/compilation/to_charptr_stringify.cpp       to_charptr_stringify.cpp       ]]
[def to_charptr_stringify_as_ho [@ ../../performance/compilation/to_charptr_stringify_as_ho.cpp to_charptr_stringify_as_ho.cpp ]]
[def to_charptr_stringify_as    [@ ../../performance/compilation/to_charptr_stringify_as.cpp    to_charptr_stringify_as.cpp    ]]


[def to_charptr_fmtlib_ho       [@ ../../performance/compilation/to_charptr_fmtlib_ho.cpp       to_charptr_fmtlib_ho.cpp    ]]
[def to_charptr_fmtlib          [@ ../../performance/compilation/to_charptr_fmtlib.cpp          to_charptr_fmtlib.cpp       ]]
[def to_charptr_main            [@ ../../performance/compilation/to_charptr_main.cpp            to_charptr_main.cpp         ]]
[def to_charptr_sprintf         [@ ../../performance/compilation/to_charptr_sprintf.cpp         to_charptr_sprintf.cpp      ]]
[def to_FILE_stringify_ho       [@ ../../performance/compilation/to_FILE_stringify_ho.cpp       to_FILE_stringify_ho.cpp    ]]
[def to_FILE_stringify          [@ ../../performance/compilation/to_FILE_stringify.cpp          to_FILE_stringify.cpp       ]]
[def to_FILE_stringify_as_ho    [@ ../../performance/compilation/to_FILE_stringify_as_ho.cpp    to_FILE_stringify_as_ho.cpp ]]
[def to_FILE_stringify_as       [@ ../../performance/compilation/to_FILE_stringify_as.cpp       to_FILE_stringify_as.cpp    ]]


[def to_FILE_fmtlib_ho          [@ ../../performance/compilation/to_FILE_fmtlib_ho.cpp          to_FILE_fmtlib_ho.cpp       ]]
[def to_FILE_fmtlib             [@ ../../performance/compilation/to_FILE_fmtlib.cpp             to_FILE_fmtlib.cpp          ]]
[def to_FILE_fprintf            [@ ../../performance/compilation/to_FILE_fprintf.cpp            to_FILE_fprintf.cpp         ]]
[def to_FILE_main               [@ ../../performance/compilation/to_FILE_main.cpp               to_FILE_main.cpp            ]]
[def to_ostream_stringify_ho    [@ ../../performance/compilation/to_ostream_stringify_ho.cpp    to_ostream_stringify_ho.cpp ]]
[def to_ostream_stringify       [@ ../../performance/compilation/to_ostream_stringify.cpp       to_ostream_stringify.cpp    ]]
[def to_ostream_stringify_as_ho [@ ../../performance/compilation/to_ostream_stringify_as_ho.cpp to_ostream_stringify_as_ho.cpp ]]
[def to_ostream_stringify_as    [@ ../../performance/compilation/to_ostream_stringify_as.cpp    to_ostream_stringify_as.cpp    ]]


[def to_ostream_fmtlib_ho       [@ ../../performance/compilation/to_ostream_fmtlib_ho.cpp       to_ostream_fmtlib_ho.cpp    ]]
[def to_ostream_BoostFormat     [@ ../../performance/compilation/to_ostream_BoostFormat.cpp     to_ostream_BoostFormat.cpp  ]]
[def to_ostream_fmtlib          [@ ../../performance/compilation/to_ostream_fmtlib.cpp          to_ostream_fmtlib.cpp       ]]
[def to_ostream_itself          [@ ../../performance/compilation/to_ostream_itself.cpp          to_ostream_itself.cpp       ]]
[def to_ostream_main            [@ ../../performance/compilation/to_ostream_main.cpp            to_ostream_main.cpp         ]]
[def to_string_stringify_ho     [@ ../../performance/compilation/to_string_stringify_ho.cpp     to_string_stringify_ho.cpp  ]]
[def to_string_stringify        [@ ../../performance/compilation/to_string_stringify.cpp        to_string_stringify.cpp     ]]
[def to_string_stringify_as_ho  [@ ../../performance/compilation/to_string_stringify_as_ho.cpp  to_string_stringify_as_ho.cpp  ]]
[def to_string_stringify_as     [@ ../../performance/compilation/to_string_stringify_as.cpp     to_string_stringify_as.cpp     ]]

[def to_string_fmtlib_ho        [@ ../../performance/compilation/to_string_fmtlib_ho.cpp        to_string_fmtlib_ho.cpp     ]]
[def to_string_fmtlib           [@ ../../performance/compilation/to_string_fmtlib.cpp           to_string_fmtlib.cpp        ]]
[def to_string_main             [@ ../../performance/compilation/to_string_main.cpp             to_string_main.cpp          ]]

[def _COMPBENCH_C0 source file]
[def _COMPBENCH_C1 compilation times [br] (wall, user, system) (s)]
[def _COMPBENCH_C2 object file size (kB)]
[def _COMPBENCH_C3 program size [br] with 1 file (kB) ]
[def _COMPBENCH_C4 program size [br]with 21 files (kB)]
[def _COMPBENCH_C5 program size [br]with 41 files (kB)]
[def _COMPBENCH_C6 program growth [br] per file (kB)]


[table Release mode / linked libraries 
[[_COMPBENCH_C0][_COMPBENCH_C1][_COMPBENCH_C2][_COMPBENCH_C3][_COMPBENCH_C4][_COMPBENCH_C5][_COMPBENCH_C6]]
[[to_string_stringify         ][0.88 `,  `0.83 `,  `0.04][     95.8][    822.9][    874.4][    925.9][    2.576]]
[[to_string_stringify_as      ][0.88 `,  `0.83 `,  `0.04][     96.7][    822.4][    959.0][   1095.6][    6.829]]
[[to_string_fmtlib            ][2.23 `,  `2.16 `,  `0.05][    163.1][    264.6][    367.7][    467.5][    5.072]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_charptr_stringify        ][0.86 `,  `0.81 `,  `0.04][     93.2][    820.4][    865.7][    909.7][    2.231]]
[[to_charptr_stringify_as     ][0.82 `,  `0.77 `,  `0.04][     88.3][    817.8][    926.8][   1035.7][    5.448]]
[[to_charptr_fmtlib           ][2.34 `,  `2.27 `,  `0.06][    119.0][    316.3][    401.0][    487.7][    4.284]]
[[to_charptr_sprintf          ][0.02 `,  `0.01 `,  `0.00][      2.3][      7.2][     14.3][     20.9][    0.344]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_FILE_stringify           ][0.84 `,  `0.79 `,  `0.04][     87.8][    822.2][    858.3][    896.2][    1.850]]
[[to_FILE_stringify_as        ][0.80 `,  `0.75 `,  `0.04][     80.4][    817.2][    990.7][   1166.2][    8.725]]
[[to_FILE_fmtlib              ][0.28 `,  `0.25 `,  `0.02][      2.4][    252.3][    260.9][    270.4][    0.453]]
[[to_FILE_fprintf             ][0.02 `,  `0.01 `,  `0.00][      2.2][      7.1][     13.8][     20.6][    0.338]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_ostream_stringify        ][0.84 `,  `0.79 `,  `0.04][     86.9][    820.3][    857.4][    892.2][    1.796]]
[[to_ostream_stringify_as     ][0.80 `,  `0.76 `,  `0.04][     80.5][    817.5][    991.3][   1166.0][    8.711]]
[[to_ostream_fmtlib           ][2.21 `,  `2.14 `,  `0.06][    159.0][    263.7][    355.6][    447.5][    4.595]]
[[to_ostream_itself           ][0.31 `,  `0.28 `,  `0.02][      4.5][      9.8][     39.6][     68.2][    1.461]]
]

[table Debug mode / linked libraries 
[[_COMPBENCH_C0][_COMPBENCH_C1][_COMPBENCH_C2][_COMPBENCH_C3][_COMPBENCH_C4][_COMPBENCH_C5][_COMPBENCH_C6]]
[[to_string_stringify         ][0.73 `,  `0.68 `,  `0.04][    754.5][   2839.2][   5728.4][   8617.7][  144.461]]
[[to_string_stringify_as      ][0.73 `,  `0.68 `,  `0.04][    779.2][   2846.4][   5811.3][   8776.7][  148.259]]
[[to_string_fmtlib            ][1.24 `,  `1.18 `,  `0.05][   1207.3][   1391.3][   5595.5][   9799.9][  210.217]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_charptr_stringify        ][0.76 `,  `0.71 `,  `0.04][    825.2][   2850.0][   6015.7][   9183.1][  158.328]]
[[to_charptr_stringify_as     ][0.76 `,  `0.71 `,  `0.04][    842.4][   2853.3][   6061.9][   9267.4][  160.352]]
[[to_charptr_fmtlib           ][1.26 `,  `1.19 `,  `0.05][   1072.2][   1572.2][   5553.7][   9538.6][  199.158]]
[[to_charptr_sprintf          ][0.02 `,  `0.01 `,  `0.00][     12.8][     16.5][    115.6][    215.2][    4.967]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_FILE_stringify           ][0.75 `,  `0.70 `,  `0.04][    799.7][   2842.5][   5920.3][   8999.2][  153.917]]
[[to_FILE_stringify_as        ][0.75 `,  `0.70 `,  `0.04][    817.0][   2848.0][   5964.0][   9080.6][  155.815]]
[[to_FILE_fmtlib              ][0.32 `,  `0.29 `,  `0.02][    153.7][   1193.1][   1882.3][   2575.4][   34.559]]
[[to_FILE_fprintf             ][0.02 `,  `0.01 `,  `0.00][     12.4][     16.3][    111.5][    206.7][    4.760]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_ostream_stringify        ][0.75 `,  `0.70 `,  `0.04][    802.7][   2856.8][   5905.9][   8955.0][  152.456]]
[[to_ostream_stringify_as     ][0.75 `,  `0.70 `,  `0.04][    821.3][   2863.6][   5972.3][   9082.6][  155.476]]
[[to_ostream_fmtlib           ][1.25 `,  `1.18 `,  `0.05][   1208.3][   1382.8][   5565.4][   9748.2][  209.137]]
[[to_ostream_itself           ][0.32 `,  `0.29 `,  `0.02][     57.8][     53.1][    437.2][    819.4][   19.159]]
]

[table Release mode / header-only libraries 
[[_COMPBENCH_C0][_COMPBENCH_C1][_COMPBENCH_C2][_COMPBENCH_C3][_COMPBENCH_C4][_COMPBENCH_C5][_COMPBENCH_C6]]
[[to_string_stringify_ho      ][2.40 `,  `2.33 `,  `0.06][    360.6][    165.6][    538.2][    911.2][   18.639]]
[[to_string_stringify_as_ho   ][2.42 `,  `2.35 `,  `0.06][    363.1][    165.2][    634.5][   1104.2][   23.474]]
[[to_string_fmtlib_ho         ][2.27 `,  `2.21 `,  `0.05][    162.6][    100.9][    219.4][    335.2][    5.858]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_charptr_stringify_ho     ][2.43 `,  `2.36 `,  `0.06][    358.2][    164.4][    520.1][    876.3][   17.798]]
[[to_charptr_stringify_as_ho  ][2.42 `,  `2.35 `,  `0.05][    361.1][    164.7][    566.2][    968.5][   20.095]]
[[to_charptr_fmtlib_ho        ][2.38 `,  `2.31 `,  `0.05][    120.9][     80.7][    181.7][    282.7][    5.051]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_FILE_stringify_ho        ][2.39 `,  `2.33 `,  `0.06][    353.1][    162.3][    578.1][    994.1][   20.795]]
[[to_FILE_stringify_as_ho     ][2.41 `,  `2.35 `,  `0.06][    353.8][    162.4][    647.1][   1133.0][   24.264]]
[[to_FILE_fmtlib_ho           ][2.27 `,  `2.20 `,  `0.06][    162.2][     99.8][    217.9][    336.0][    5.906]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_ostream_stringify_ho     ][2.35 `,  `2.28 `,  `0.06][    348.9][    158.9][    504.7][    851.7][   17.320]]
[[to_ostream_stringify_as_ho  ][2.38 `,  `2.32 `,  `0.06][    351.5][    162.3][    599.6][   1039.6][   21.932]]
[[to_ostream_fmtlib_ho        ][2.29 `,  `2.22 `,  `0.06][    162.2][    100.6][    208.3][    316.1][    5.386]]
[[to_ostream_BoostFormat      ][1.84 `,  `1.78 `,  `0.05][    178.0][     92.5][    206.5][    318.3][    5.644]]
]

[table Debug mode / header-only libraries 
[[_COMPBENCH_C0][_COMPBENCH_C1][_COMPBENCH_C2][_COMPBENCH_C3][_COMPBENCH_C4][_COMPBENCH_C5][_COMPBENCH_C6]]
[[to_string_stringify_ho      ][1.27 `,  `1.20 `,  `0.06][   1640.0][    883.0][   6965.5][  13048.2][  304.131]]
[[to_string_stringify_as_ho   ][1.28 `,  `1.21 `,  `0.06][   1686.1][    904.5][   7120.7][  13337.1][  310.817]]
[[to_string_fmtlib_ho         ][1.33 `,  `1.27 `,  `0.06][   1269.0][    707.0][   5230.0][   9753.1][  226.151]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_charptr_stringify_ho     ][1.28 `,  `1.21 `,  `0.06][   1667.9][    875.3][   7107.0][  13338.6][  311.585]]
[[to_charptr_stringify_as_ho  ][1.28 `,  `1.21 `,  `0.06][   1701.7][    891.4][   7208.2][  13523.5][  315.803]]
[[to_charptr_fmtlib_ho        ][1.36 `,  `1.30 `,  `0.06][   1152.9][    613.9][   4989.0][   9364.2][  218.759]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_FILE_stringify_ho        ][1.27 `,  `1.20 `,  `0.06][   1640.8][    862.7][   6990.7][  13118.7][  306.398]]
[[to_FILE_fmtlib_ho           ][1.33 `,  `1.26 `,  `0.06][   1267.9][    686.7][   5187.5][   9688.4][  225.041]]
[[                            ][                        ][         ][         ][         ][         ][         ]]
[[to_ostream_stringify_ho     ][1.28 `,  `1.22 `,  `0.06][   1644.2][    877.6][   6976.4][  13075.5][  304.948]]
[[to_ostream_stringify_as_ho  ][1.28 `,  `1.22 `,  `0.06][   1679.6][    894.1][   7098.8][  13304.6][  310.264]]
[[to_ostream_fmtlib_ho        ][1.34 `,  `1.28 `,  `0.06][   1265.4][    696.6][   5202.8][   9709.0][  225.311]]
[[to_ostream_BoostFormat      ][1.06 `,  `0.99 `,  `0.05][    865.3][    478.9][   3771.8][   7064.8][  164.646]]
]


[endsect]

[endsect]







