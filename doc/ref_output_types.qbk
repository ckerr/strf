[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Output Types]

[section `std::basic_string`]

[h5 String creation]

[#to_basic_string]
[table
[[
  `template< typename CharT`[br]
  [^\u2000\u2000\u2000\u2000\u2000\u2000\u2000\u2000]`, typename Traits = std::char_traits<CharT>`[br]
  [^\u2001\u2001\u2001\u2001\u2000\u2000\u2000\u2000]`, typename Allocator = std::allocator<CharT> >`[br]
  `constexpr `[link dispatcher `dispatcher`]`<`[link
   facets_pack `facets_pack`]`<>, `['`/* implementation-defined */`]`> to_basic_string;`
]]
[[
  [variablelist
    [[ Return type of [link dispatcher_strf stringification functions]]
     [ `std::basic_string<CharT, Traits, Allocator>`]]
     
    [[ Effect of [link dispatcher_strf stringification functions]]
     [ Returns the stringification result ]]

    [[ Note ]
     [ This dispatcher support the [link dispatcher_reserve reserve]
       functions. ]]]
]]
]

[#to_string]
[table
[[
  `constexpr `[link dispatcher `dispatcher`]`<`[link facets_pack `facets_pack`]`<>, `
  ['`/* implementation-defined */`]`> to_string;`
]]
[[
  [variablelist
   [[Value]
    [Same as `to_basic_string<char>`.]]]
]]
]

[#to_u16string]
[table
[[
  `constexpr `[link dispatcher `dispatcher`]`<`[link facets_pack `facets_pack`]`<>, `
  ['`/* implementation-defined */`]`> to_u16string;`
]]
[[
  [variablelist
   [[Value]
    [Same as `to_basic_string<char16_t>`.]]]
]]
]

[#to_u32string]
[table
[[
  `constexpr `[link dispatcher `dispatcher`]`<`[link facets_pack `facets_pack`]`<>, `
  ['`/* implementation-defined */`]`> to_32string;`
]]
[[
  [variablelist
   [[Value]
    [Same as `to_basic_string<char32_t>`.]]]
]]
]

[#to_wstring]
[table
[[
  `constexpr `[link dispatcher `dispatcher`]`<`[link facets_pack `facets_pack`]`<>, `
  ['`/* implementation-defined */`]`> to_wstring;`
]]
[[
  [variablelist
   [[Value]
    [Same as `to_basic_string<wchar_t>`.]]]
]]
]

[h5 Append]

[#append]
[table
[[
  `template <typename CharT, typename Traits, typename A>`[br]
  `constexpr `[link dispatcher `dispatcher`]`< `[link facets_pack
  `facets_pack`]`<>, `['`/* implementataion-defined */`]` >`[br]
  `append(std::basic_string<CharT, Traits, A>& str);`
]]
[[
  [variablelist
    [[ Return type of [link dispatcher_strf stringification functions]]
     [ `std::size_t`]]
    [[ Effect of [link dispatcher_strf stringification functions]]
     [ Append into `str` the stringification result and return
       the number of appended characters.]]
    [[ Note ]
     [ This dispatcher support the [link dispatcher_reserve reserve]
       functions. ]]]
]]
]

[h5 Assign]

[#assign]
[table
[[
  `template <typename CharT, typename Traits, typename A>`[br]
  `constexpr `[link dispatcher `dispatcher`]`< `[link facets_pack
  `facets_pack`]`<>, `['`/* implementataion-defined */`]` >`[br]
  `assign(std::basic_string<CharT, Traits, A>& str);`
]]
[[
  [variablelist
    [[Effect]
     [Same as `{ str.clear(); return append(str); }`]]]
]]
]


[endsect]
[section Raw strings]

[#write_char_ptr_count]
[table
[[

[role version_mark (C++20)]`inline dispatcher< stringify::v0::facets_pack<>,`
['`/* implementation-defined... */`]` > write(char8_t* dest, std::size_t count);`[br]

[role version_mark]`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char* dest, std::size_t count);`[br]

[role version_mark]`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char16_t* dest, std::size_t count);`[br]

[role version_mark]`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char32_t* dest, std::size_t count);`[br]

[role version_mark]`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(wchar_t* dest, std::size_t count);`[br]

]]
[[
  [variablelist
    [[ Requirements]
     [ `count != 0`]]

    [[ Return type of [link dispatcher_strf stringification functions]]
     [ `std::size_t`]]
     
    [[ Effect of [link dispatcher_strf stringification functions]]
     [ On success, copy the stringification result plus the termination
       character to `dest` and return the length of such result.

       Throws `std::out_of_range`
       if the number of characters to be written, including the
       termination character, is greater than `count`.]]

    [[ Notes ]
     [[itemized_list
       [ A termination character `'\0'` is aways written]
       [ This dispatcher does not support the [link dispatcher_reserve reserve]
         functions. ]]]]]

]]
]

[#write_char_arr]
[table
[[
`template<std::size_t N>`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char (&dest)[N]);`[br]


`template<std::size_t N>`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char16_t (&dest)[N]);`[br]


`template<std::size_t N>`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char32_t (&dest)[N]);`[br]


`template<std::size_t N>`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(wchar_t (&dest)[N]);`[br]

]]
[[
  [variablelist
    [[Effect]
     [Same as `write(dest, N, count_ptr)`]]]
]]
]


[#write_char_ptr_range]
[table
[[
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char* dest, char* end);`[br]

`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char16_t* dest, char16_t* end);`[br]

`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(char32_t* dest, char32_t* end);`[br]

`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write(wchar_t* dest, wchar_t* end);`[br]

]]
[[
  [variablelist
    [[Effect]
     [Same as `write(dest, (end - dest), count_ptr)`]]]
]]
]


[endsect]
[section `std::FILE*`]

[#write_FILE]
[table
[[

`template <typename CharT = char>`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write`[br]
[^\u2000\u2000\u2000\u2000]`( std::FILE* dest`[br]
[^\u2000\u2000\u2000\u2000]`, std::size_t* count_ptr = nullptr );`

]]
[[
  [variablelist
    [[Requirements]
     [[itemized_list
       [`dest` must opened]
       [`dest` must be narrow-orientated (even if `CharT` is `wchar_t`).]
       [If `sizeof(char)` is greater than one, `dest` must be opened
        in binary mode.]]]]

     [[ Return type of [link dispatcher_strf stringification functions]]
      [ `std::size_t`]]
     
    [[ Effects of [link dispatcher_strf stringification functions]]
     [ [itemized_list
        [ Write the stringification result to `dest` by sucessively calling
          `std::fwrite` using an itermediate buffer of `CharT` casted as
          `char*`. ] 
        [ If `count_ptr` is not null, assigns to `*count_ptr` the number
          of successfully written characters. ]
        [ If an error happens on `std::fwrite`, throws a `std::system_error`
          object initialized with
          `std::error_code{errno, std::generic_category()}`. ]
        [ On success, returns the number of written characters. ]]]]

  [[ Notes ]
     [[itemized_list
       [ `std::fflush` is not called.]
       [ This dispatcher does not support the [link dispatcher_reserve reserve]
         functions. ]]]]]
]]
]

[#wwrite_FILE]
[table
[[
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > wwrite`[br]
[^\u2000\u2000\u2000\u2000]`( std::FILE* dest`[br]
[^\u2000\u2000\u2000\u2000]`, std::size_t* count_ptr = nullptr );`
]]
[[
  [variablelist
   [[Requirements]
     [[itemized_list
       [`dest` must opened]
       [`dest` must be wide-orientated (even if `CharT` is `wchar_t`).]]]]
    
   [[Return type of [link dispatcher_strf stringification functions]]
      [ `std::size_t`]]
   
   [[ Effects of [link dispatcher_strf stringification functions]]
     [ [itemized_list
        [ Write the stringification result to `dest` by sucessively calling
          `std::fputwc`. ] 
        [ If `count_ptr` is not null, assigns `*count_ptr` to the number
          of successfully written characters. ]
        [ If an error happens on `std::fputwc`, throws a `std::system_error`
          object initialized with 
          `std::error_code{errno, std::generic_category()}`. ]
    
        [ On success, returns the number of written characters. ]]]]


   [[ Notes ]
     [[itemized_list
       [ `std::fflush` is not called.]
       [ This dispatcher does not support the [link dispatcher_reserve reserve]
         functions. ]]]]]
]]
]

[endsect]

[#write_std_streambuf]
[section `std::streambuf`]

[table
[[
`template<typename CharT, typename Traits = std::char_traits<CharT> >`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write`[br]
[^\u2000\u2000\u2000\u2000]`( std::basic_streambuf<CharT, Traits>& dest`[br]
[^\u2000\u2000\u2000\u2000]`, std::streamsize* count_ptr = nullptr );`
]]
[[
  [variablelist
   [[ Return type of [link dispatcher_strf stringification functions]]
    [std::streamsize]]
     
    [[ Effects of [link dispatcher_strf stringification functions]]
     [ Write the stringification result to `dest` by sucessively calling
       `std::basic_streambuf<CharT, Traits>::sputn` using an itermediate buffer.]
     [ If `count_ptr` is not null, assigns `*count_ptr` to the number
       of successfully written characters. ]
     [ If an error happens on `std::basic_streambuf<CharT, Traits>::sputn`,
       throws `std::runtime_error`. ]
     [ On success, returns the number of written characters. ]]
   
   [[ Note ]
    [ This dispatcher does not support the [link dispatcher_reserve reserve]
      functions. ]]]
]]
]

[table
[[
`template<typename CharT, typename Traits = std::char_traits<CharT> >`[br]
`inline dispatcher< stringify::v0::facets_pack<>, `
['`/* implementation-defined... */`]` > write`[br]
[^\u2000\u2000\u2000\u2000]`( std::basic_streambuf<CharT, Traits>* dest`[br]
[^\u2000\u2000\u2000\u2000]`, std::streamsize* count_ptr = nullptr );`
]]
[[
  [variablelist
    [[ Effects ]
     [ Same as `write(&dest, count_ptr)`]]]
]]
]

[endsect]
[endsect]