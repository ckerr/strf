[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:output_types Output types]
[#output_types]

The "`ec_`" prefix means that an `std::error_code` is returned.
While the other expressions use exceptions.

[table
[ []  [Destination type] [Leading expression]]

[ [1] [`std::string`]
  [ [link to_string [*`to_string `]]]]

[ [2] [`std::u16string`]
  [ [link to_u16string [*`to_u16string `]]]]

[ [3] [`std::u32string`]
  [ [link to_u32string [*`to_u32string `]]]]

[ [4] [`std::wstring`]
  [ [link to_wstring [*`to_wstring `]]]]

[ [5] [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Alloc]`>`]
  [ [link to_basic_string [*`to_basic_string`]]`<`[~CharT]`, `[~Traits]`, `[~Alloc]`>`]]

[ [6] [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Alloc]`>&`]
  [ [link append [*`append`]]`(`[~destination]`)`]]

[ [7] [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Alloc]`>&`]
  [ [link assign [*`assign`]]`(`[~destination]`)`]]

[ [8]  [[~CharT]`*`]
  [ [link write_char_ptr_count [*`write`]]`(`[~destination]`, `[~limit]`)`]]

[ [9] [[~CharT]`*`]
  [ [link write_char_ptr_range [*`write`]]`(`[~destination]`, `[~end]`)`]]

[ [10] [[~CharT[size]]]
  [ [link write_char_arr [*`write`]]`(`[~destination]`)`]]

[ [11] [ `FILE*` ( using narrow functions) ]
  [ [link write_FILE [*`write`]]`<`[~CharT]`>(`[~destination]`, `[~count_ptr]`)`]]

[ [12]  [ `FILE*` ( using wide functions) ]
  [ [link wwrite_FILE [*`wwrite`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [13] [ `std::basic_streambuf <`[~CharT]`, `[~Traits]`>&`]
  [ [link write_std_streambuf [*`write`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [14]
  [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Alloc]`>&`]
  [ [link ec_append [*`ec_append`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [15] [`std::basic_string <`[~CharT]`, `[~Traits]`, `[~Alloc]`>&`]
  [ [link ec_assign [*`ec_assign`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [16]  [[~CharT]`*`]
  [ [link ec_write_char_ptr_count [*`ec_write`]]`(`[~destination]`, `[~limit]`, `[~count_ptr]`)`]]

[ [17] [[~CharT]`*`]
  [ [link ec_write_char_ptr_range [*`ec_write`]]`(`[~destination]`, `[~end]`, `[~count_ptr]`)`]]

[ [18] [[~CharT[size]]]
  [ [link ec_write_char_arr [*`ec_write`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [19] [ `FILE*` ( using narrow functions) ]
  [ [link ec_write_FILE [*`ec_write`]]`<`[~CharT]`>(`[~destination]`, `[~count_ptr]`)`]]

[ [20]  [ `FILE*` ( using wide functions) ]
  [ [link ec_wwrite_FILE [*`ec_wwrite`]]`(`[~destination]`, `[~count_ptr]`)`]]

[ [21] [ `std::basic_streambuf <`[~CharT]`, `[~Traits]`>&`]
  [ [link ec_write_std_streambuf [*`ec_write`]]`(`[~destination]`, `[~count_ptr]`)`]]

]

where:

* [~CharT] can be `char`, `char16_t`, `char32_t` or `wchar_t`
* [~end] is [~CharT]*
* [~limit] is `std::size_t`. It determines the maximum number of characters that can be written, including the termination character.
* [~count_ptr] is optional. The number of successfully written characters will be assigned to [~*count_ptr]. Its type is `std::streamsize*` when [~destination] is `std::basic_streambuf <`[~CharT]`, `[~Traits]`>` and `std::size_t*` otherwise.
* 7) [~Alloc] is optional. If omitted, it is `std::allocator<`[~CharT]`>`
* 7-10) [~Traits] is optional. If omitted, it is `std::char_traits<`[~CharT]`>`
* 11 and 20) [~CharT] is optional. If omitted, it is `char`
* 11, 12, 20 and 21) `std::fflush` is [_not] called
* 14 to 21) Although the error policy is to return `std::error_code`, there is no guarantee that no exception is thrown.


[endsect]