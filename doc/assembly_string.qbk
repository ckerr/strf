[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[import ../example/v0/assembly_string.cpp]
[import ../example/v0/trivial_sample.cpp]

[#section_assembly_string]
[section The assembly string]

The ['assembly string] is analogous to what in others formatting libraries is called as the /format string/, except that it does not format any of the arguments. Formatting is specified instead with [link format_functions format functions].

As shown in the diagram, the assembly string is optional. When not used, the arguments are just printed sequentially. The main reason it exists is to enable the creation of multilingual programs by the use of translation tools like [@https://en.wikipedia.org/wiki/Gettext gettext].

[trivial_sample]

[h4 Assembly string syntax]

[table 
[[A `'{'` followed by]  [until]                           [means]]
[[`'-'`]                [the next `'}'` or end of string] [a comment]]
[[a digit]              [the next `'}'` or end of string] [a positional argument]]
[[any other character]  [the next `'}'` or end of string] [a non positional argument]]
[[another `'{'`]        [the second `'{'`]                [an escaped `'{'`]]
]

[variablelist

[[Comments]
[Comments are useful for internationalization, /i.e./ when the assembly string has to be translated to another languages.
The translation may be the role of someone else than you. So you can add comments intended to help such person.
]
[[asmstr_comment_sample]]
]

[[Positional argument]
[Position zero refers to the first input argument.]
[The characters the after the digits are ignored by the parser. So they can also be seen as comments.]
[[asmstr_positional_arg]]
]

[[Non positional argument]
[The characters the after the `'{'` are ignored as well]
[[asmstr_non_positional_arg]]
]

[[Escapes]
[ There is no way to escape the `'}'` character. There is no need to, since the `'}'` has special meaning only if it corresponds to a previous `'{'`]
[[asmstr_escape_sample]]
]
]

[endsect]