[/==============================================================================
    Use, modification and distribution is subject to the Boost Software License,
    Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:usage Usage]

[table
[ []  [Destination type] [Expression]]

[ [1]  [`std::basic_string<`[~CharT, Traits, Allocator]`>`]
  [ [*`append_to(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [2] [`std::basic_string<`[~CharT, Traits, Allocator]`>`]
  [ [*`assign_to(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [3] [`std::string`]
  [ [*`make_string`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [4] [`std::u16string`]
  [ [*`make_u16string`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [5] [`std::u32string`]
  [ [*`make_u32string`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [6] [`std::wstring`]
  [ [*`make_wstring`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [7] [`std::basic_string<`[~CharT, Traits, Allocator]`>`]
  [ [*`make_basic_string<`][~CharT, Traits, Allocator][*`>(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [8] [[~CharT]`*`]
  [ [*`write_to<`][~Traits]` = std::char_traits<CharT>`[*`> (`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [9]  [[~CharT]`*`]
  [ [*`write_to<`][~Traits]` = std::char_traits<CharT>`[*`> `]`(`][~destination], [~count][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [10] [[~CharT]`*`]
  [ [*`write_to<`][~Traits]` = std::char_traits<CharT>`[*`> `]`(`][~destination], [~end][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [11] [ `std::basic_streambuf<`[~CharT, Traits]`>`]
  [ [*`write_to(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [12] [ `FILE*` ( using narrow function) ]
  [ [*`write_to(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]

[ [13]  [ `FILE*` ( using wide functions) ]
  [ [*`wwrite_to(`][~destination][*`)`]`.with(`[~facets...]`)(`[~args...]`)`]]
]

* [~count] is `std::size_t`
* [~end] is [~CharT]*
* [~CharT] can be `char`, `char16_t`, `char32_t` or `wchar_t`

[h3 Notes]

* 1-7) An adequate capacity is reserved before writting any character so that at most only one memory allocation happens inside the destination string.
* 7) [~Allocator] is optional. If omitted, it is `std::allocator<`[~CharT]`>`
* 7-10) [~Traits] is optional. If omitted, it is `std::char_traits<`[~CharT]`>`
* The use of `.with(`[~facets]`...)` is optional.
* Instead of `(`[~args...]`)`, you can also use `[{`[~args...]`}]`.


[h3 Effect]

* 1) Append to string.
* 2) Assing to string.
* 3-7) Generate string.
* 8) Write raw string.
* 9) Write raw string. Write at most [~count] characters, including the terminating null character, which is aways written, except if [~count]` == 0`.
* 10) Same as `write_to(`[~destination]`, `[~end]` - `[~destination]`)`.
* 11) Write content to `std::basic_streambuf`.
* 12) Write content to `FILE*` using narrow orientated functions.
* 13) Write content to `FILE*` using wide orientated functions.


[h3 Return]

* 1 - 2) `void`
* 3 - 7) The generated string.
* 8) Number of writen characters, not counting the terminating null character.
* 9 - 10) An instance of `char_ptr_result`:
``
struct char_ptr_result
{
    std::size_t length; // Number of writen characters, not counting the terminating null character
    bool success;       // true if all characters were successfully writen
};
``
* 11 - 12) An instance of `FILE_result`:
``
struct FILE_result
{
    std::size_t count; // Number of writen characters
    bool success;      // true if all characters were successfully writen
};
``

[endsect]

